{"version":3,"sources":["components/contact/Contact.module.css","components/Phonebook.module.css","redux/contacts/contuctsActions.js","redux/contacts/contactsActionTypes.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contact/Contact.js","components/contactList/ContactList.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","deleteContact","changeFilter","ContactForm","state","handleNameChange","e","target","value","setState","handleNumberChange","handleSubmit","preventDefault","props","onAddContact","this","onSubmit","className","styles","group","autoComplete","input","type","onChange","required","bar","label","buttonSubmit","Component","connect","items","contacts","dispatch","contact","filter","onChangeFilter","evt","onDeleteNumber","buttonDelete","onClick","ContactList","map","item","toLowerCase","includes","App","style","phoneBook","length","itemsReducer","createReducer","action","filterReducer","contactReucers","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.141cc0a9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonDelete\":\"Contact_buttonDelete__1lOCX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phoneBook\":\"Phonebook_phoneBook__Cjdgh\",\"group\":\"Phonebook_group__p6Evy\",\"input\":\"Phonebook_input__g_5fO\",\"label\":\"Phonebook_label__2OL9P\",\"bar\":\"Phonebook_bar__7WmQ_\",\"buttonSubmit\":\"Phonebook_buttonSubmit__1mHo2\"};","import {\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  FILTER_CONTACT,\n} from './contactsActionTypes';\n\nimport { createAction, nanoid } from '@reduxjs/toolkit';\n\nconst addContact = createAction(ADD_CONTACT, ({ name, number }) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction(DELETE_CONTACT);\nconst changeFilter = createAction(FILTER_CONTACT);\n\nexport { addContact, deleteContact, changeFilter };\n\n//  ============= без reduxjs/toolkit =================\n// import { v4 as uuidv4 } from 'uuid';\n// import actionTypes from './contactsActionTypes';\n\n// const addContact = ({ name, number }) => ({\n//   type: actionTypes.ADD_CONTACT,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// const deleteContact = id => ({\n//   type: actionTypes.DELETE_CONTACT,\n//   payload: { id },\n// });\n\n// const changeFilter = filter => ({\n//   type: actionTypes.FILTER_CONTACT,\n//   payload: { filter },\n// });\n\n// export default {\n//   addContact,\n//   deleteContact,\n//   changeFilter,\n// };\n","const ADD_CONTACT = 'contacts/add';\nconst DELETE_CONTACT = 'contacts/delete';\nconst FILTER_CONTACT = 'contacts/filter';\n\nexport { ADD_CONTACT, DELETE_CONTACT, FILTER_CONTACT };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../Phonebook.module.css';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contuctsActions';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleNameChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleNumberChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (!this.state.name || !this.state.number) return;\n\n    this.props.onAddContact({ ...this.state });\n\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className={styles.group}>\n          <input\n            autoComplete=\"off\"\n            className={styles.input}\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            onChange={this.handleNameChange}\n            required\n          />\n          <span className={styles.bar}></span>\n          <label className={styles.label}>Name</label>\n        </div>\n        <div className={styles.group}>\n          <input\n            autoComplete=\"off\"\n            className={styles.input}\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            onChange={this.handleNumberChange}\n            required\n          />\n          <span className={styles.bar}></span>\n          <label className={styles.label}>Number:</label>\n        </div>\n        <hr />\n        <button className={styles.buttonSubmit} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  return {\n    items: state.contacts.items,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: contact => dispatch(addContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport styles from '../Phonebook.module.css';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contuctsActions';\n\nconst Filter = ({ value, onChangeFilter }) => {\n  const onHadleFilter = evt => {\n    onChangeFilter(evt.target.value);\n  };\n\n  return (\n    <div className={styles.group}>\n      <input\n        autoComplete=\"off\"\n        className={styles.input}\n        type=\"text\"\n        value={value}\n        name=\"name\"\n        onChange={onHadleFilter}\n        required\n      />\n      <span className={styles.bar}></span>\n      <label className={styles.label}>Find contacts by name</label>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    filter: state.contacts.filter,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: filter => dispatch(changeFilter(filter)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport styles from './Contact.module.css';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contuctsActions';\n\nconst Contact = ({ contact, onDeleteNumber }) => {\n  const deleteItem = () => {\n    onDeleteNumber(contact.id);\n  };\n\n  return (\n    <>\n      <span>\n        {contact.name}: {contact.number}\n      </span>\n      <button\n        className={styles.buttonDelete}\n        type=\"button\"\n        onClick={deleteItem}\n      >\n        DELETE\n      </button>\n    </>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteNumber: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(null, mapDispatchToProps)(Contact);\n","import React, { Component } from 'react';\nimport Contact from '../contact/Contact';\nimport { connect } from 'react-redux';\n\nclass ContactList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.contacts.map(item => (\n          <li key={item.id}>\n            <Contact contact={item} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts.filter\n      ? state.contacts.items.filter(contact =>\n          contact.name\n            .toLowerCase()\n            .includes(state.contacts.filter.toLowerCase()),\n        )\n      : state.contacts.items,\n  };\n};\n\nexport default connect(mapStateToProps)(ContactList);\n\n//  ============= без reduxjs/toolkit =================\n// import React, { Component } from 'react';\n// import PropTypes from 'prop-types';\n// import Contact from '../contact/Contact';\n// import { connect } from 'react-redux';\n\n// class ContactList extends Component {\n//   render() {\n//     return (\n//       <ul>\n//         {this.props.contacts.map(item => (\n//           <li key={item.id}>\n//             <Contact contact={item} />\n//           </li>\n//         ))}\n//       </ul>\n//     );\n//   }\n// }\n\n// ContactList.propTypes = {\n//   items: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//     }).isRequired,\n//   ).isRequired,\n//   onDeleteNumber: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = state => {\n//   return {\n//     contacts: state.contacts.filter\n//       ? state.contacts.items.filter(contact =>\n//           contact.name\n//             .toLowerCase()\n//             .includes(state.contacts.filter.toLowerCase()),\n//         )\n//       : state.contacts.items,\n//   };\n// };\n\n// export default connect(mapStateToProps)(ContactList);\n","import React, { Component } from 'react';\nimport ContactForm from './contactForm/ContactForm';\nimport Filter from './filter/Filter';\nimport ContactList from './contactList/ContactList';\nimport style from './Phonebook.module.css';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../redux/contacts/contuctsActions';\n\nclass App extends Component {\n  render() {\n    const { items } = this.props;\n    return (\n      <div className={style.phoneBook}>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        {items.length >= 2 && <Filter />}\n\n        {items.length > 0 && <ContactList />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    items: state.contacts.items,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: filter => dispatch(changeFilter(filter)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n// import React, { Component } from 'react';\n// import ContactForm from './contactForm/ContactForm';\n// import Filter from './filter/Filter';\n// import ContactList from './contactList/ContactList';\n// import style from './Phonebook.module.css';\n// import { connect } from 'react-redux';\n// import actions from '../redux/contacts/contuctsActions';\n\n// class App extends Component {\n//   render() {\n//     const { items } = this.props;\n//     return (\n//       <div className={style.phoneBook}>\n//         <h1>Phonebook</h1>\n//         <ContactForm />\n//         <h2>Contacts</h2>\n//         {items.length >= 2 && <Filter />}\n\n//         {items.length > 0 && <ContactList />}\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => {\n//   return {\n//     items: state.contacts.items,\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => ({\n//   onChangeFilter: filter => dispatch(actions.changeFilter(filter)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './contuctsActions';\nimport { combineReducers } from 'redux';\n\nconst itemsReducer = createReducer([], {\n  [addContact]: (state, action) => [...state, action.payload],\n  [deleteContact]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload),\n});\n\nconst filterReducer = createReducer('', {\n  [changeFilter]: (state, action) => action.payload,\n});\n\nconst contactReucers = combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n\nexport default contactReucers;\n\n//  ============= без reduxjs/toolkit =================\n// import { combineReducers } from 'redux';\n// import actionTypes from './contactsActionTypes';\n\n// const items = (state = [], action) => {\n//   switch (action.type) {\n//     case actionTypes.ADD_CONTACT:\n//       return [...state, action.payload];\n\n//     case actionTypes.DELETE_CONTACT:\n//       return state.filter(contact => contact.id !== action.payload.id);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', action) => {\n//   switch (action.type) {\n//     case actionTypes.FILTER_CONTACT:\n//       return action.payload.filter;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport contactsReducer from './contacts/contactsReducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n\n//  ============= без reduxjs/toolkit =================\n// import { createStore, combineReducers } from 'redux';\n// import contactsReducer from './contacts/contactsReducer';\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// const store = createStore(\n//   rootReducer,\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n// );\n\n// export default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './globalize.css';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store.store}>\n    <PersistGate loading={null} persistor={store.persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}